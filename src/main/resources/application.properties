# configure your datasource
quarkus.datasource.db-kind = postgresql
quarkus.hibernate-orm.log.sql=true
quarkus.datasource.username = ordersuser
quarkus.datasource.password = orderspassword

#%dev.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/ordersdb
%prod.quarkus.datasource.jdbc.url = jdbc:postgresql://postgresql.store-demo-test.svc.cluster.local:5432/ordersdb
#dev.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:32796/ordersdb
%test.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/ordersdb

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation = drop-and-create

quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.route.expose=true
# Configuring the outgoing channel (writing to Kafka)
mp.messaging.incoming.orders-out.connector=smallrye-kafka
mp.messaging.incoming.orders-out.topic=orders-out
mp.messaging.incoming.orders-out.key.deserializer=org.apache.kafka.common.serialization.UUIDDeserializer
mp.messaging.incoming.orders-out.value.deserializer=com.redhat.demo.mcombi.OrderDeserializer

%prod.kafka.bootstrap.servers=my-cluster-kafka-bootstrap.amq-demo-prj-1.svc.cluster.local:9092
%prod.mp.messaging.incoming.orders-out.connector=smallrye-in-memory
%prod.mp.messaging.incoming.orders-out.topic=orders

## HTTP configuration
quarkus.http.port=8084
quarkus.http.test-port=0
quarkus.jackson.serialization-inclusion=non-empty